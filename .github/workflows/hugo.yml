# Workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Allows this workflow to be called from other workflows
  workflow_call:
  # Triggers on push to main branch
  push:
    branches:
      - main
    paths:
      - '**'
      - '!README.md'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.128.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      - name: Install Hugo theme
        run: |
          git clone https://github.com/panr/hugo-theme-terminal.git themes/terminal

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: Download latest firmware releases from all repositories
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p public/releases

          # Get the latest release from modulove/A-RYTH-MATIK
          echo "Downloading A-RYTH-MATIK firmware..."
          LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/modulove/A-RYTH-MATIK/releases/latest)

          # Extract download URLs for .hex files
          echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | endswith(".hex")) | .browser_download_url' > /tmp/arythmatik_urls.txt

          # Download each .hex file
          while read url; do
            if [ ! -z "$url" ]; then
              echo "Downloading: $url"
              wget -q -P public/releases "$url" || echo "Failed to download $url"
            fi
          done < /tmp/arythmatik_urls.txt

          # Get the latest release from modulove/MVMNT
          echo "Downloading MVMNT firmware..."
          MVMNT_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/modulove/MVMNT/releases/latest)

          # Extract download URLs for .hex files
          echo "$MVMNT_RELEASE" | jq -r '.assets[] | select(.name | endswith(".hex")) | .browser_download_url' > /tmp/mvmnt_urls.txt

          # Download each .hex file
          while read url; do
            if [ ! -z "$url" ]; then
              echo "Downloading: $url"
              wget -q -P public/releases "$url" || echo "Failed to download $url"
            fi
          done < /tmp/mvmnt_urls.txt

          # Get the latest release from modulove/SCOPE
          echo "Downloading SCOPE firmware..."
          SCOPE_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/modulove/SCOPE/releases/latest)

          # Extract download URLs for .hex files
          echo "$SCOPE_RELEASE" | jq -r '.assets[] | select(.name | endswith(".hex")) | .browser_download_url' > /tmp/scope_urls.txt

          # Download each .hex file
          while read url; do
            if [ ! -z "$url" ]; then
              echo "Downloading: $url"
              wget -q -P public/releases "$url" || echo "Failed to download $url"
            fi
          done < /tmp/scope_urls.txt

          # Get the latest release from modulove/MOD1
          echo "Downloading MOD1 firmware..."
          MOD1_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/modulove/MOD1/releases/latest)

          # Extract download URLs for .hex files
          echo "$MOD1_RELEASE" | jq -r '.assets[] | select(.name | endswith(".hex")) | .browser_download_url' > /tmp/mod1_urls.txt

          # Download each .hex file
          while read url; do
            if [ ! -z "$url" ]; then
              echo "Downloading: $url"
              wget -q -P public/releases "$url" || echo "Failed to download $url"
            fi
          done < /tmp/mod1_urls.txt

          # Get the latest release from modulove/utf-9-samplified
          echo "Downloading UTF-9-SAMPLIFIED firmware..."
          UTF9_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/modulove/utf-9-samplified/releases/latest)

          # Extract download URLs for .hex files
          echo "$UTF9_RELEASE" | jq -r '.assets[] | select(.name | endswith(".hex")) | .browser_download_url' > /tmp/utf9_urls.txt

          # Download each .hex file
          while read url; do
            if [ ! -z "$url" ]; then
              echo "Downloading: $url"
              wget -q -P public/releases "$url" || echo "Failed to download $url"
            fi
          done < /tmp/utf9_urls.txt

          # Get the latest release from modulove/MOD2
          echo "Downloading MOD2 firmware..."
          MOD2_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/modulove/MOD2/releases/latest)

          # Extract download URLs for .uf2 files (RP2350 format)
          echo "$MOD2_RELEASE" | jq -r '.assets[] | select(.name | endswith(".uf2")) | .browser_download_url' > /tmp/mod2_urls.txt

          # Download each .uf2 file
          while read url; do
            if [ ! -z "$url" ]; then
              echo "Downloading: $url"
              wget -q -P public/releases "$url" || echo "Failed to download $url"
            fi
          done < /tmp/mod2_urls.txt

          # List downloaded files
          echo "Downloaded firmware files:"
          ls -lh public/releases/

      - name: Display structure of Hugo build files
        run: ls -R ./public

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
